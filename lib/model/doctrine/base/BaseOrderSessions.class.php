<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('OrderSessions', 'doctrine');

/**
 * BaseOrderSessions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $session_id
 * @property integer $product_id
 * @property integer $nos
 * @property string $size
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Products $Products
 * 
 * @method integer       getId()         Returns the current record's "id" value
 * @method string        getSessionId()  Returns the current record's "session_id" value
 * @method integer       getProductId()  Returns the current record's "product_id" value
 * @method integer       getNos()        Returns the current record's "nos" value
 * @method string        getSize()       Returns the current record's "size" value
 * @method timestamp     getCreatedAt()  Returns the current record's "created_at" value
 * @method timestamp     getUpdatedAt()  Returns the current record's "updated_at" value
 * @method Products      getProducts()   Returns the current record's "Products" value
 * @method OrderSessions setId()         Sets the current record's "id" value
 * @method OrderSessions setSessionId()  Sets the current record's "session_id" value
 * @method OrderSessions setProductId()  Sets the current record's "product_id" value
 * @method OrderSessions setNos()        Sets the current record's "nos" value
 * @method OrderSessions setSize()       Sets the current record's "size" value
 * @method OrderSessions setCreatedAt()  Sets the current record's "created_at" value
 * @method OrderSessions setUpdatedAt()  Sets the current record's "updated_at" value
 * @method OrderSessions setProducts()   Sets the current record's "Products" value
 * 
 * @package    devil
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseOrderSessions extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('order_sessions');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('session_id', 'string', 225, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 225,
             ));
        $this->hasColumn('product_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('nos', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('size', 'string', 5, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 5,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Products', array(
             'local' => 'product_id',
             'foreign' => 'product_id'));
    }
}